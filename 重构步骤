🔥 重构项目的任务步骤
阶段一：基础环境搭建

✅ 环境变量管理

.env 管理数据库、对象存储、日志等配置。

flask CLI 正常运行，flask db upgrade 成功。

✅ 数据库建模

使用 SQLAlchemy 定义模型（User、TestCase、TestPlan、Execution 等）。

保证 flask db migrate / flask db upgrade 可以顺利运行。


阶段二：用户与认证

🔑 用户模块

接口：注册用户（用户名、密码哈希、邮箱）。

接口：用户登录（返回 JWT Token）。

接口：获取当前用户信息（通过 token）。

使用 Flask-JWT-Extended 管理 token。

🛡️ 权限管理

区分普通用户和管理员角色。

限制部分接口只能管理员访问。

阶段三：测试计划与用例管理

📋 测试计划 (TestPlan)

接口：创建测试计划

接口：更新/删除测试计划

接口：查询测试计划列表和详情

🧾 测试用例 (TestCase)

接口：新增测试用例

接口：编辑/删除用例

接口：按计划/项目查询用例

🖇️ 计划与用例的关联

一个计划下挂多个用例

用例可以复用

阶段四：执行与结果追踪

▶️ 执行记录 (TestExecution)

接口：开始执行

接口：更新执行状态（Pass/Fail/Blocked…）

接口：查询执行历史

📊 结果统计

执行通过率

失败用例收集

报表接口（后续可以配合前端可视化）

阶段五：日志 & 存储

📂 日志系统

本地调试时 → 控制台输出

部署到服务器时 → 同时写文件和控制台（用 loguru）

☁️ 对象存储

上传测试截图、报告到 S3 (AWS 接口)

数据库只保存文件路径/链接

阶段六：优化与扩展

🔧 接口优化

分页查询

模糊搜索（用户名、用例名等）

过滤条件（按计划、时间、执行结果）

🔒 安全性

密码加盐哈希

API 接口限流（Flask-Limiter）

跨域处理（Flask-CORS）

🚀 部署

Docker 化应用

Gunicorn + Nginx 部署

定时任务（Celery/Crontab）